diff --git a/RemoteControlServer.Tests/RemoteControlServer.Tests.csproj b/RemoteControlServer.Tests/RemoteControlServer.Tests.csproj
index 7de06c9..c051f6d 100644
--- a/RemoteControlServer.Tests/RemoteControlServer.Tests.csproj
+++ b/RemoteControlServer.Tests/RemoteControlServer.Tests.csproj
@@ -1,7 +1,7 @@
 <Project Sdk="Microsoft.NET.Sdk">
 
   <PropertyGroup>
-    <TargetFramework>net6.0</TargetFramework>
+    <TargetFramework>net8.0</TargetFramework>
     <ImplicitUsings>enable</ImplicitUsings>
     <Nullable>enable</Nullable>
 
@@ -28,7 +28,7 @@
 
   <ItemGroup>
     <Reference Include="NetworkMessage">
-      <HintPath>..\..\NetworkMessage\NetworkMessage\bin\Debug\net6.0\NetworkMessage.dll</HintPath>
+      <HintPath>..\..\NetworkMessage\NetworkMessage\bin\Debug\net8.0\NetworkMessage.dll</HintPath>
     </Reference>
   </ItemGroup>
 
diff --git a/RemoteControlServer/BusinessLogic/Communicators/ConnectedDevice.cs b/RemoteControlServer/BusinessLogic/Communicators/ConnectedDevice.cs
index 3dd9e6c..6a3cc7c 100644
--- a/RemoteControlServer/BusinessLogic/Communicators/ConnectedDevice.cs
+++ b/RemoteControlServer/BusinessLogic/Communicators/ConnectedDevice.cs
@@ -14,7 +14,10 @@ namespace RemoteControlServer.BusinessLogic.Communicators
     public class ConnectedDevice : TcpCryptoClientCommunicator
     {
         private readonly IDeviceRepository deviceRepository;
+        
         public Device Device { get; private set; }
+        
+        //public Queue<>  { get; set; }
 
         /// <exception cref="NotImplementedException"/>
         /// <exception cref="ArgumentNullException"/>
@@ -28,28 +31,30 @@ namespace RemoteControlServer.BusinessLogic.Communicators
             this.deviceRepository = deviceRepository ?? throw new ArgumentNullException(nameof(deviceRepository));
         }
 
-        public override async Task<bool> HandshakeAsync(IProgress<int> progress = null, CancellationToken token = default)
+        public override async Task<bool> HandshakeAsync(IProgress<long> progress = null, CancellationToken token = default)
         {
             INetworkMessage message;
-            PublicKeyInfoResult publicKeyInfo =
-                await ReceiveNetworkObjectAsync<PublicKeyInfoResult>(progress, token).ConfigureAwait(false);
-            if (publicKeyInfo == default) throw new NullReferenceException(nameof(publicKeyInfo));
+            //byte[] publicKey = await ReceiveBytesAsync(progress, token).ConfigureAwait(false);
+            byte[] publicKey;
+            using (MemoryStream ms = new MemoryStream())
+            {
+                await ReceiveStreamAsync(ms, progress, token).ConfigureAwait(false);
+                publicKey = ms.ToArray();
+            }
 
-            byte[] publicKey = await ReceiveBytesAsync(progress, token).ConfigureAwait(false);
             if (publicKey == default || publicKey.Length == 0) throw new NullReferenceException(nameof(publicKey));
 
             SetExternalPublicKey(publicKey);
-
             BaseIntent guidIntent = new GuidIntent();
             message = new NetworkMessage.NetworkMessage(guidIntent);
-            await SendMessageAsync(message, progress, token).ConfigureAwait(false);
+            await SendObjectAsync(guidIntent, progress, token).ConfigureAwait(false);
             DeviceGuidResult guidResult = await ReceiveNetworkObjectAsync<DeviceGuidResult>(progress, token).ConfigureAwait(false);
             if (guidResult == null) throw new NullReferenceException(nameof(guidResult));
             Device = await deviceRepository.FindByGuidAsync(guidResult.Guid);
             IsConnected = true;
             SuccessfulTransferResult transferResult = new SuccessfulTransferResult(true);
             message = new NetworkMessage.NetworkMessage(transferResult);
-            await SendMessageAsync(message, token: token).ConfigureAwait(false);
+            await SendObjectAsync(transferResult, token: token).ConfigureAwait(false);
             return true;
         }
     }
diff --git a/RemoteControlServer/BusinessLogic/Communicators/ServerListener.cs b/RemoteControlServer/BusinessLogic/Communicators/ServerListener.cs
index 5863ffb..e2cdf11 100644
--- a/RemoteControlServer/BusinessLogic/Communicators/ServerListener.cs
+++ b/RemoteControlServer/BusinessLogic/Communicators/ServerListener.cs
@@ -53,14 +53,14 @@ namespace RemoteControlServer.BusinessLogic.Communicators
                         logger.LogInformation("Start connection to {client}", client.Client.RemoteEndPoint);
                         ConnectedDevice newCD =
                             new ConnectedDevice(client, asymmetricCryptographer, symmetricCryptographer, keyStore, dbRepository.Devices);
-                        CancellationTokenSource tokenSource = new CancellationTokenSource(30000);
+                        CancellationTokenSource tokenSource = new CancellationTokenSource(300000);
                         logger.LogInformation("Handshake with {client}", client.Client.RemoteEndPoint);
                         try
                         {
-                            Progress<int> progress = new Progress<int>((int e) => Debug.WriteLine(e));
+                            Progress<long> progress = new Progress<long>((long e) => Debug.WriteLine(e));
                             await newCD.HandshakeAsync(progress, tokenSource.Token);
 
-                            User deviceUser = newCD.Device.User;
+                            User deviceUser = newCD?.Device?.User;
                             if (deviceUser == null || await dbRepository.Users.FindByEmailAsync(deviceUser.Email) == null)
                             {
                                 throw new NullReferenceException(nameof(deviceUser));
diff --git a/RemoteControlServer/Controllers/AccountController.cs b/RemoteControlServer/Controllers/AccountController.cs
index 7fdc734..5c01547 100644
--- a/RemoteControlServer/Controllers/AccountController.cs
+++ b/RemoteControlServer/Controllers/AccountController.cs
@@ -2,7 +2,7 @@
 using Microsoft.AspNetCore.Authorization;
 using Microsoft.AspNetCore.Mvc;
 using RemoteControlServer.BusinessLogic.Repository.DbRepository;
-using RemoteControlServer.Models;
+using RemoteControlServer.ViewModels;
 using System.Security.Claims;
 using RemoteControlServer.BusinessLogic.Database.Models;
 using NetworkMessage.Cryptography.Hash;
diff --git a/RemoteControlServer/Controllers/AuthentificationAPIController.cs b/RemoteControlServer/Controllers/AuthentificationAPIController.cs
index ea10e42..e58457a 100644
--- a/RemoteControlServer/Controllers/AuthentificationAPIController.cs
+++ b/RemoteControlServer/Controllers/AuthentificationAPIController.cs
@@ -87,7 +87,7 @@ namespace RemoteControlServer.Controllers
             }            
 
             await dbRepository.Users.SaveChangesAsync();
-            logger.LogInformation("Success authorize {email}", email);
+            logger.LogInformation("Success authorize {email}", email);            
             return Ok(publicKey);
         }
         
diff --git a/RemoteControlServer/Controllers/DeviceAPIController.cs b/RemoteControlServer/Controllers/DeviceAPIController.cs
index 61ebefc..366d086 100644
--- a/RemoteControlServer/Controllers/DeviceAPIController.cs
+++ b/RemoteControlServer/Controllers/DeviceAPIController.cs
@@ -1,9 +1,5 @@
 ï»¿using Microsoft.AspNetCore.Authorization;
-using Microsoft.AspNetCore.Connections.Features;
 using Microsoft.AspNetCore.Mvc;
-using Microsoft.AspNetCore.Razor.Language.Intermediate;
-using Microsoft.CodeAnalysis.CSharp.Syntax;
-using Microsoft.EntityFrameworkCore.Storage.ValueConversion.Internal;
 using NetworkMessage;
 using NetworkMessage.CommandsResults;
 using NetworkMessage.Intents;
@@ -11,11 +7,8 @@ using RemoteControlServer.BusinessLogic;
 using RemoteControlServer.BusinessLogic.Communicators;
 using RemoteControlServer.BusinessLogic.Database.Models;
 using RemoteControlServer.BusinessLogic.Repository.DbRepository;
-using System.Net;
-using System.Reflection.Metadata;
+using System.Diagnostics;
 using System.Security.Claims;
-using System.Text;
-using System.Text.Encodings.Web;
 
 // For more information on enabling Web API for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
 
@@ -25,15 +18,19 @@ namespace RemoteControlServer.Controllers
     [ApiController]
     public class DeviceAPIController : ControllerBase
     {
+        private object locker;
         private readonly ILogger<DeviceAPIController> logger;
         private readonly ConnectedDevicesService connectedDevices;
         private readonly IDbRepository dbRepository;
+        private readonly IWebHostEnvironment webHostEnvironment;
 
-        public DeviceAPIController(ILogger<DeviceAPIController> logger, ConnectedDevicesService connectedDevices, IDbRepository dbRepository)
+        public DeviceAPIController(ILogger<DeviceAPIController> logger, ConnectedDevicesService connectedDevices, 
+            IDbRepository dbRepository, IWebHostEnvironment webHostEnvironment)
         {
             this.logger = logger;
             this.connectedDevices = connectedDevices;
             this.dbRepository = dbRepository;
+            this.webHostEnvironment = webHostEnvironment;
         }
 
         [HttpGet("GetInfo/{macAddress}")]
@@ -44,7 +41,7 @@ namespace RemoteControlServer.Controllers
         }
 
         [Authorize]
-        [HttpPost("GetNestedFilesInfoInDirectory")]
+        [HttpPost("GetNestedFilesInfoInDirectoryForServer")]
         public async Task<IActionResult> GetNestedFilesInfoInDirectory([FromForm] int deviceId, [FromForm] string path)
         {
             logger.LogInformation("GetNestedFilesInfoInDirectory for server {time}", DateTime.Now);
@@ -65,24 +62,45 @@ namespace RemoteControlServer.Controllers
         }
 
         [Authorize]
-        [HttpPost("DownloadFile")]
-        public async Task<IActionResult> DownloadFile([FromForm] int deviceId, [FromForm] string path)
+        [HttpPost("DownloadFileForServer")]
+        public async Task DownloadFile([FromForm] int deviceId, [FromForm] string path)
         {
             logger.LogInformation("DownloadFile for server {time}", DateTime.Now);
             byte[] userToken = (await GetUserAsync()).AuthToken;
-            if (userToken == null) return BadRequest("Empty user token");
-            if (deviceId <= 0) return BadRequest("Invalid device id format");
-            if (string.IsNullOrWhiteSpace(path)) return BadRequest("Empty path");
+            //if (userToken == null) return BadRequest("Empty user token");
+            //if (deviceId <= 0) return BadRequest("Invalid device id format");
+            //if (string.IsNullOrWhiteSpace(path)) return BadRequest("Empty path");
 
             Device device = await dbRepository.Devices.FindByIdAsync(deviceId);
-            if (device == null) return NotFound("Device not found");
-            if (!device.User.AuthToken.SequenceEqual(userToken)) return BadRequest("User token is invalid for this device");
+            //if (device == null) return NotFound("Device not found");
+            //if (!device.User.AuthToken.SequenceEqual(userToken)) return BadRequest("User token is invalid for this device");
 
             ConnectedDevice connectedDevice = connectedDevices.GetConnectedDeviceByDeviceId(deviceId);
-            if (connectedDevices == null) return Forbid("Device isn't connected to server");
+            //if (connectedDevices == null) return Forbid("Device isn't connected to server");
 
-            CancellationTokenSource tokenSource = new CancellationTokenSource(50000);
-            return await DownloadFileFromDeviceAsync(connectedDevice, path, tokenSource.Token);
+            CancellationTokenSource tokenSource = new CancellationTokenSource(500000);
+            await DownloadFileFromDeviceAsync(connectedDevice, path, tokenSource.Token);
+        }
+
+        [Authorize]
+        [HttpPost("DownloadDirectoryForServer")]
+        public async Task DownloadDirectory([FromForm] int deviceId, [FromForm] string path)
+        {
+            logger.LogInformation("DownloadFile for server {time}", DateTime.Now);
+            byte[] userToken = (await GetUserAsync()).AuthToken;
+            //if (userToken == null) return BadRequest("Empty user token");
+            //if (deviceId <= 0) return BadRequest("Invalid device id format");
+            //if (string.IsNullOrWhiteSpace(path)) return BadRequest("Empty path");
+
+            Device device = await dbRepository.Devices.FindByIdAsync(deviceId);
+            //if (device == null) return NotFound("Device not found");
+            //if (!device.User.AuthToken.SequenceEqual(userToken)) return BadRequest("User token is invalid for this device");
+
+            ConnectedDevice connectedDevice = connectedDevices.GetConnectedDeviceByDeviceId(deviceId);
+            //if (connectedDevices == null) return Forbid("Device isn't connected to server");
+
+            CancellationTokenSource tokenSource = new CancellationTokenSource(500000);
+            await DownloadDirectoryFromDeviceAsync(connectedDevice, path, tokenSource.Token);
         }
 
         [HttpGet("GetNestedFilesInfoInDirectory")]
@@ -130,7 +148,7 @@ namespace RemoteControlServer.Controllers
                 return BadRequest("User token isn't in base64");
             }
 
-            if (token == null) return BadRequest("Empty user token"); 
+            if (token == null) return BadRequest("Empty user token");
             if (deviceId <= 0) return BadRequest("Invalid device id format");
             if (string.IsNullOrWhiteSpace(path)) return BadRequest("Empty path");
 
@@ -142,7 +160,8 @@ namespace RemoteControlServer.Controllers
             if (connectedDevices == null) return Forbid("Device isn't connected to server");
 
             CancellationTokenSource tokenSource = new CancellationTokenSource(50000);
-            return await DownloadFileFromDeviceAsync(connectedDevice, path, tokenSource.Token);
+            //await DownloadFileFromDeviceAsync(connectedDevice, path, length, tokenSource.Token).ConfigureAwait(false);
+            return Ok();
         }
 
         [HttpGet("GetConnectedDevice")]
@@ -190,7 +209,7 @@ namespace RemoteControlServer.Controllers
             {
                 intent = new NestedFilesInfoIntent(path);
                 message = new NetworkMessage.NetworkMessage(intent);
-                await connectedDevice.SendMessageAsync(message, token: token);
+                await connectedDevice.SendObjectAsync(intent, token: token);
                 NestedFilesInfoResult nestedFiles =
                     await connectedDevice.ReceiveNetworkObjectAsync<NestedFilesInfoResult>(token: token);
                 if (nestedFiles.ErrorMessage != null)
@@ -200,7 +219,7 @@ namespace RemoteControlServer.Controllers
 
                 intent = new NestedDirectoriesInfoIntent(path);
                 message = new NetworkMessage.NetworkMessage(intent);
-                await connectedDevice.SendMessageAsync(message, token: token);
+                await connectedDevice.SendObjectAsync(intent, token: token);
                 NestedDirectoriesInfoResult nestedDirectories =
                     await connectedDevice.ReceiveNetworkObjectAsync<NestedDirectoriesInfoResult>(token: token);
                 if (nestedFiles.ErrorMessage != null)
@@ -227,24 +246,22 @@ namespace RemoteControlServer.Controllers
             }
         }
 
-        private async Task<IActionResult> DownloadFileFromDeviceAsync(ConnectedDevice connectedDevice, string path, CancellationToken token = default)
+        private async Task DownloadFileFromDeviceAsync(ConnectedDevice connectedDevice, string path, CancellationToken token = default)
         {
             INetworkMessage message;
             BaseIntent intent;
+            string tempPath = Path.Combine(webHostEnvironment.WebRootPath, "temp", Guid.NewGuid().ToString());
             try
             {
+                string fileName = path[(path.LastIndexOf('/') + 1)..];
+                string extension = path[(path.LastIndexOf('.') + 1)..].ToLower();
+
                 intent = new DownloadFileIntent(path);
                 message = new NetworkMessage.NetworkMessage(intent);
-                await connectedDevice.SendMessageAsync(message, token: token);
-                DownloadFileResult fileResult =
-                    await connectedDevice.ReceiveNetworkObjectAsync<DownloadFileResult>(token: token);
-                if (fileResult.ErrorMessage != null)
-                {
-                    return StatusCode(StatusCodes.Status406NotAcceptable, fileResult.ErrorMessage);
-                }
+                await connectedDevice.SendObjectAsync(intent, token: token).ConfigureAwait(false);                               
 
-                string fileName = path[(path.LastIndexOf('/') + 1)..];
-                string extension = path[(path.LastIndexOf('.') + 1)..].ToLower();
+                IProgress<long> progress = new Progress<long>(i => Debug.WriteLine(i));
+                //await connectedDevice.ReceiveFileAsync(tempPath, progress, token).ConfigureAwait(false);
                 string contentType = extension switch
                 {
                     "txt" => "text/plain",
@@ -259,36 +276,52 @@ namespace RemoteControlServer.Controllers
                     _ => "application/octet-stream"
                 };
 
-                logger.LogInformation("DownloadFile success {time}", DateTime.Now);
-                return File(fileResult.File, contentType, fileName);
+                HttpContext.Response.ContentType = contentType;
+                HttpContext.Response.Headers.ContentDisposition = $"attachment; filename={fileName}";
+                //HttpContext.Response.Headers.ContentLength = length;
+                await connectedDevice.ReceiveStreamAsync(HttpContext.Response.Body, token: token).ConfigureAwait(false);
+
+                logger.LogInformation("DownloadFile success {time}", DateTime.Now);                
+                //return PhysicalFile(tempPath, contentType, fileName);
             }
             catch (OperationCanceledException)
             {
-                return StatusCode(StatusCodes.Status408RequestTimeout);
+                //return StatusCode(StatusCodes.Status408RequestTimeout);
             }
             catch (Exception ex)
             {
-                return StatusCode(StatusCodes.Status500InternalServerError, ex);
+                //return StatusCode(StatusCodes.Status500InternalServerError, ex);
             }
         }
 
-        private async Task<byte[]> GetAuthTokenFromRequestBodyAsync(CancellationToken token = default)
+        private async Task DownloadDirectoryFromDeviceAsync(ConnectedDevice connectedDevice, string path, CancellationToken token = default)
         {
-            HttpContext.Request.EnableBuffering();
+            INetworkMessage message;
+            BaseIntent intent;
+            string tempPath = Path.Combine(webHostEnvironment.WebRootPath, "temp", Guid.NewGuid().ToString());
+            try
+            {
+                string fileName = path[(path.LastIndexOf('/') + 1)..];
+                string extension = path[(path.LastIndexOf('.') + 1)..].ToLower();
 
-            using (MemoryStream memoryStream = new MemoryStream())
+                intent = new DownloadDirectoryIntent(path);
+                message = new NetworkMessage.NetworkMessage(intent);
+                await connectedDevice.SendObjectAsync(intent, token: token).ConfigureAwait(false);
+
+                IProgress<long> progress = new Progress<long>(i => Debug.WriteLine(i));                
+                HttpContext.Response.ContentType = "application/octet-stream";
+                HttpContext.Response.Headers.ContentDisposition = $"attachment; filename={fileName}";                
+                await connectedDevice.ReceiveStreamAsync(HttpContext.Response.Body, token: token).ConfigureAwait(false);
+                logger.LogInformation("DownloadDirectory success {time}", DateTime.Now);                
+            }
+            catch (OperationCanceledException)
             {
-                try
-                {
-                    await HttpContext.Request.Body.CopyToAsync(memoryStream, token);
-                    return memoryStream.ToArray();
-                }
-                catch (Exception ex)
-                {
-                    logger.LogError(ex.Message);
-                    return null;
-                }
-            }            
+                //return StatusCode(StatusCodes.Status408RequestTimeout);
+            }
+            catch (Exception ex)
+            {
+                //return StatusCode(StatusCodes.Status500InternalServerError, ex);
+            }
         }
 
         private Task<User> GetUserAsync()
diff --git a/RemoteControlServer/Controllers/DeviceController.cs b/RemoteControlServer/Controllers/DeviceController.cs
index 0d10668..8d15a8b 100644
--- a/RemoteControlServer/Controllers/DeviceController.cs
+++ b/RemoteControlServer/Controllers/DeviceController.cs
@@ -5,7 +5,7 @@ using RemoteControlServer.BusinessLogic;
 using RemoteControlServer.BusinessLogic.Communicators;
 using RemoteControlServer.BusinessLogic.Database.Models;
 using RemoteControlServer.BusinessLogic.Repository.DbRepository;
-using RemoteControlServer.Models;
+using RemoteControlServer.ViewModels;
 using System.Security.Claims;
 
 namespace RemoteControlServer.Controllers
diff --git a/RemoteControlServer/Controllers/HomeController.cs b/RemoteControlServer/Controllers/HomeController.cs
index ea41739..75605f7 100644
--- a/RemoteControlServer/Controllers/HomeController.cs
+++ b/RemoteControlServer/Controllers/HomeController.cs
@@ -3,7 +3,7 @@ using Microsoft.AspNetCore.Mvc;
 using RemoteControlServer.BusinessLogic;
 using RemoteControlServer.BusinessLogic.Database.Models;
 using RemoteControlServer.BusinessLogic.Repository.DbRepository;
-using RemoteControlServer.Models;
+using RemoteControlServer.ViewModels;
 using System.ComponentModel.DataAnnotations;
 using System.Diagnostics;
 using System.Security.Claims;
diff --git a/RemoteControlServer/Models/AuthorizationViewModel.cs b/RemoteControlServer/Models/AuthorizationViewModel.cs
deleted file mode 100644
index 43ba0de..0000000
--- a/RemoteControlServer/Models/AuthorizationViewModel.cs
+++ /dev/null
@@ -1,19 +0,0 @@
-ï»¿using System.ComponentModel.DataAnnotations;
-using System.Xml.Linq;
-
-namespace RemoteControlServer.Models
-{
-    public class AuthorizationViewModel
-    {
-
-        [Required(ErrorMessage = "ÐÐ¾Ð»Ðµ \"Ð¿Ð¾ÑÑÐ°\" Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼")]
-        [Display(Name = "Email")]
-        public string Email { get; set; }
-
-        [Required(ErrorMessage = "ÐÐ¾Ð»Ðµ \"Ð¿Ð°ÑÐ¾Ð»Ñ\" Ð½Ðµ Ð¼Ð¾Ð¶ÐµÑ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼")]
-        [Display(Name = "Password")]
-        [DataType(DataType.Password)]
-        public string Password { get; set; }
-
-    }
-}
diff --git a/RemoteControlServer/Models/DeviceViewModel.cs b/RemoteControlServer/Models/DeviceViewModel.cs
deleted file mode 100644
index 72601ee..0000000
--- a/RemoteControlServer/Models/DeviceViewModel.cs
+++ /dev/null
@@ -1,20 +0,0 @@
-ï»¿using RemoteControlServer.BusinessLogic.Communicators;
-
-namespace RemoteControlServer.Models
-{
-    public class DeviceViewModel
-    {
-        public int DeviceId { get; set; }
-
-        public ConnectedDevice ConnectedDevice { get; set; } 
-
-        public string Path { get; set; }
-
-        public DeviceViewModel(int deviceId, ConnectedDevice connectedDevice, string path)
-        {
-            DeviceId = deviceId;
-            ConnectedDevice = connectedDevice;
-            Path = path;
-        }
-    }
-}
diff --git a/RemoteControlServer/Models/ErrorViewModel.cs b/RemoteControlServer/Models/ErrorViewModel.cs
deleted file mode 100644
index a7d4781..0000000
--- a/RemoteControlServer/Models/ErrorViewModel.cs
+++ /dev/null
@@ -1,9 +0,0 @@
-namespace RemoteControlServer.Models
-{
-    public class ErrorViewModel
-    {
-        public string RequestId { get; set; }
-
-        public bool ShowRequestId => !string.IsNullOrEmpty(RequestId);
-    }
-}
\ No newline at end of file
diff --git a/RemoteControlServer/Models/RegistrationViewModel.cs b/RemoteControlServer/Models/RegistrationViewModel.cs
deleted file mode 100644
index f2ab143..0000000
--- a/RemoteControlServer/Models/RegistrationViewModel.cs
+++ /dev/null
@@ -1,30 +0,0 @@
-ï»¿using System.ComponentModel.DataAnnotations;
-using System.Diagnostics.CodeAnalysis;
-
-namespace RemoteControlServer.Models
-{
-    public class RegistrationViewModel
-    {
-        [Required(ErrorMessage = "ÐÐ¾Ð»Ðµ \"Ð»Ð¾Ð³Ð¸Ð½\" Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼")]
-        [StringLength(20, MinimumLength = 3, ErrorMessage = "ÐÐ»Ð¸Ð½Ð° ÑÑÑÐ¾ÐºÐ¸ Ð´Ð¾Ð»Ð¶Ð½Ð° Ð±ÑÑÑ Ð¾Ñ 3 Ð´Ð¾ 20 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²")]
-        [Display(Name="ÐÐ¾Ð³Ð¸Ð½")]
-        public string Login { get; set; }
-
-        [Required(ErrorMessage = "ÐÐ¾Ð»Ðµ \"Ð¿Ð¾ÑÑÐ°\" Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼")]
-        [Display(Name = "ÐÐ¾ÑÑÐ°")]
-        [EmailAddress(ErrorMessage ="Email Ð¸Ð¼ÐµÐµÑ Ð½ÐµÐ´Ð¾Ð¿ÑÑÑÐ¸Ð¼ÑÐ¹ ÑÐ¾ÑÐ¼Ð°Ñ")]
-        public string Email { get; set; }
-
-        [Required(ErrorMessage = "ÐÐ¾Ð»Ðµ \"Ð¿Ð°ÑÐ¾Ð»Ñ\" Ð½Ðµ Ð´Ð¾Ð»Ð¶Ð½Ð¾ Ð±ÑÑÑ Ð¿ÑÑÑÑÐ¼")]
-        [StringLength(20, MinimumLength = 3, ErrorMessage = "ÐÐ»Ð¸Ð½Ð° ÑÑÑÐ¾ÐºÐ¸ Ð´Ð¾Ð»Ð¶Ð½Ð° Ð±ÑÑÑ Ð¾Ñ 3 Ð´Ð¾ 20 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²")]
-        [Display(Name = "ÐÐ°ÑÐ¾Ð»Ñ")]
-        [DataType(DataType.Password)]
-        public string Password { get; set; }
-
-        [Required(ErrorMessage = "ÐÐµÐ¾Ð±ÑÐ¾Ð´Ð¸Ð¼Ð¾ Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ´Ð¸ÑÑ Ð¿Ð°ÑÐ¾Ð»Ñ")]
-        [StringLength(20, MinimumLength = 3, ErrorMessage = "ÐÐ»Ð¸Ð½Ð° ÑÑÑÐ¾ÐºÐ¸ Ð´Ð¾Ð»Ð¶Ð½Ð° Ð±ÑÑÑ Ð¾Ñ 3 Ð´Ð¾ 20 ÑÐ¸Ð¼Ð²Ð¾Ð»Ð¾Ð²")]
-        [Display(Name = "ÐÐ¾Ð´ÑÐ²ÐµÑÐ´Ð¸ÑÑ Ð¿Ð°ÑÐ¾Ð»Ñ")]
-        [Compare("Password",ErrorMessage ="ÐÐ°ÑÐ¾Ð»Ð¸ Ð½Ðµ ÑÐ¾Ð¾ÑÐ²ÐµÑÑÑÐ²ÑÑÑ")]
-        public string ConfirmPassword { get; set; }
-    }
-}
diff --git a/RemoteControlServer/Properties/launchSettings.json b/RemoteControlServer/Properties/launchSettings.json
index 7813859..f9fa9f4 100644
--- a/RemoteControlServer/Properties/launchSettings.json
+++ b/RemoteControlServer/Properties/launchSettings.json
@@ -12,11 +12,11 @@
       "commandName": "Project",
       "dotnetRunMessages": true,
       "launchBrowser": true,
-      "applicationUrl": "http://192.168.1.82:5170",
+      "applicationUrl": "http://192.168.209.254:5170",
       "environmentVariables": {
         "ASPNETCORE_ENVIRONMENT": "Development"
       }
-    },
+    }, 
     "IIS Express": {
       "commandName": "IISExpress",
       "launchBrowser": true,
diff --git a/RemoteControlServer/RemoteControlServer.csproj b/RemoteControlServer/RemoteControlServer.csproj
index 1c79b82..892c97a 100644
--- a/RemoteControlServer/RemoteControlServer.csproj
+++ b/RemoteControlServer/RemoteControlServer.csproj
@@ -1,7 +1,7 @@
 ï»¿<Project Sdk="Microsoft.NET.Sdk.Web">
 
   <PropertyGroup>
-    <TargetFramework>net6.0</TargetFramework>
+    <TargetFramework>net8.0</TargetFramework>
     <Nullable>disable</Nullable>
     <ImplicitUsings>enable</ImplicitUsings>
   </PropertyGroup>
@@ -32,7 +32,11 @@
 
 	<ItemGroup>
 	  <Reference Include="NetworkMessage">
-	    <HintPath>F:\VisualStudiaProjects\RemoteControlCommunicator\NetworkMessage\bin\Debug\net6.0\NetworkMessage.dll</HintPath>
+	    <HintPath>..\..\NetworkMessage\NetworkMessage\bin\Debug\net8.0\NetworkMessage.dll</HintPath>
 	  </Reference>
 	</ItemGroup>
+
+	<ItemGroup>
+	  <Folder Include="wwwroot\temp\" />
+	</ItemGroup>
 </Project>
diff --git a/RemoteControlServer/Views/Device/Index.cshtml b/RemoteControlServer/Views/Device/Index.cshtml
index 4d345d9..8e36558 100644
--- a/RemoteControlServer/Views/Device/Index.cshtml
+++ b/RemoteControlServer/Views/Device/Index.cshtml
@@ -41,6 +41,16 @@
                 </div>
             </div>
         </div>
+
+        <form id="fileForm" hidden action='/api/deviceapi/DownloadFileForServer' method='post'>
+            <input id="deviceId" name="deviceId" value="@Model.DeviceId"/>
+            <input id="filePath" name="path" />
+        </form>
+
+        <form id="dirForm" hidden action='/api/deviceapi/DownloadDirectoryForServer' method='post'>
+            <input id="deviceId" name="deviceId" value="@Model.DeviceId" />
+            <input id="dirPath" name="path" />
+        </form>
     </div>
 
     @section Scripts
@@ -58,7 +68,7 @@
                     path = "/" + path 
                 }
 
-                var data = new FormData()                                
+                var data = new FormData()
                 data.append("deviceId", "@Model.ConnectedDevice?.Device?.Id")
                 data.append("path", "root" + path)                
                 return data
@@ -69,7 +79,7 @@
                 $("#folder #folderLoader").removeClass("d-none")
                 
                 $.ajax({
-                    url: "/api/deviceapi/GetNestedFilesInfoInDirectory",
+                    url: "/api/deviceapi/GetNestedFilesInfoInDirectoryForServer",
                     method: "post",
                     contentType: false,
                     processData: false,
@@ -97,41 +107,18 @@
                         })                        
 
                         $(".downloadBtn").click(function () {
-                            if ($(this).parent().parent().hasClass("directoryRow")) {
-                                return
-                            }
-                            
                             var curBtn = $(this)
                             curBtn.attr("disabled", "disabled")
                             var name = $($(this).parent().parent().children('td')[0]).text()
-                            var p = path + "/" + name;
-                            console.log(p)
-
-                            $.ajax({
-                                url: "/api/deviceapi/downloadfile",
-                                contentType: false,
-                                processData: false,
-                                method: "post",
-                                data: GetFormData(p),
-                                xhr: function () {
-                                    var xhr = new XMLHttpRequest();
-                                    xhr.responseType = "blob";
-                                    return xhr;
-                                },
-                                success: function(data, status, xhr) {
-                                    var filename = (xhr.getResponseHeader("content-disposition").split("filename=")[1].split(";")[0])
-                                    var link = $("<a id='downloader'></a>").prop("href", window.URL.createObjectURL(new Blob([data]))).prop("download", filename)
-                                    link.addClass("hidden")
-                                    document.body.appendChild(link[0]).click()
-                                    curBtn.removeAttr("disabled")
-                                },
-                                error: function (jqXHR, exception) {
-                                    console.log(jqXHR)
-                                    console.log(exception)
-                                }
-                            })
-
-                            console.log(path)
+                            newPath = takePath(path, name)                            
+                            if ($(this).parent().parent().hasClass("directoryRow")) {
+                                $("#dirPath").val(newPath)
+                                $("#dirForm").submit()
+                                return
+                            }
+                                                        
+                            $("#filePath").val(newPath)
+                            $("#fileForm").submit()
                         })
                     },
                     error: function (jqXHR, exception) {
@@ -142,6 +129,17 @@
                 });
             }
 
+            function takePath(oldPath, name)
+            {                
+                var newPath = oldPath + name;
+                if (newPath[0] != '/') {
+                    newPath = "/" + newPath
+                }
+
+                newPath = "root" + newPath
+                return newPath;
+            }
+
             function fillRow(d)
             {
                 $("#folder > tbody").append
diff --git a/RemoteControlServer/Views/Home/Index.cshtml b/RemoteControlServer/Views/Home/Index.cshtml
index 03c2a8d..d06efc5 100644
--- a/RemoteControlServer/Views/Home/Index.cshtml
+++ b/RemoteControlServer/Views/Home/Index.cshtml
@@ -8,7 +8,7 @@
     <div class="row-md-12">
         @foreach (ConnectedDevice clientDevice in ViewBag.UserDevices)
         {
-            <div class="col-md-6">
+            <div class="col-md-6 mb-4">
                 <div class="card rounded-4">
                     <h5 class="card-header">@clientDevice?.Device.DeviceName</h5>
                     <div class="card-body ms-4">
@@ -30,8 +30,51 @@
                         <a class="btn btn-primary mt-3" href="/device/@clientDevice?.Device.Id/">ÐÐ¾Ð¼Ð°Ð½Ð´Ñ</a>
                     </div>
                 </div>
-            </div>
-
-        }
+            </div>            
+        }             
     </div>
 </div>
+
+
+@section Scripts
+{
+    <script>
+        $(document).ready(function () 
+        {
+            $(form).submit()
+
+
+            // form = $("form[action='/api/deviceapi/down', method='get']")
+            // form.addClass("hidden")
+            // input = $("input").attr("name", "id")
+            // input.val(1)
+            // form.append(input);
+            // form.submit()            
+
+            //form.appendChild($("input[name='id'], [value='1']"))
+
+            // $.ajax({
+            //     url: "/api/deviceapi/down",
+            //     contentType: false,
+            //     processData: false,
+            //     method: "get",
+            //     xhr: function () {
+            //         var xhr = new XMLHttpRequest();
+            //         xhr.responseType = "blob";
+            //         return xhr;
+            //     },
+            //     success: function (data, status, xhr) {
+            //         var filename = (xhr.getResponseHeader("content-disposition").split("filename=")[1].split(";")[0])
+            //         var link = $("<a id='downloader'></a>").prop("href", window.URL.createObjectURL(new Blob([data]))).prop("download", filename)
+            //         link.addClass("hidden")
+            //         document.body.appendChild(link[0]).click()
+            //         curBtn.removeAttr("disabled")
+            //     },
+            //     error: function (jqXHR, exception) {
+            //         console.log(jqXHR)
+            //         console.log(exception)
+            //     }
+            // })
+        })
+    </script>
+}
\ No newline at end of file
diff --git a/RemoteControlServer/Views/_ViewImports.cshtml b/RemoteControlServer/Views/_ViewImports.cshtml
index 4de949a..b991c9a 100644
--- a/RemoteControlServer/Views/_ViewImports.cshtml
+++ b/RemoteControlServer/Views/_ViewImports.cshtml
@@ -1,3 +1,3 @@
 ï»¿@using RemoteControlServer
-@using RemoteControlServer.Models
+@using RemoteControlServer.ViewModels
 @addTagHelper *, Microsoft.AspNetCore.Mvc.TagHelpers
diff --git a/RemoteControlServer/appsettings.json b/RemoteControlServer/appsettings.json
index a0d04e8..bd643d5 100644
--- a/RemoteControlServer/appsettings.json
+++ b/RemoteControlServer/appsettings.json
@@ -1,6 +1,6 @@
 {
   "ConnectionStrings": {
-    "DefaultConnection": "Host=localhost;Database=remoteControlServerDb;Username=postgres;Password=nb^teg62"
+    "DefaultConnection": "Host=localhost;Database=remoteControlServerDb;Username=postgres;Password=1f54cek78G"
   },
   "Logging": {
     "LogLevel": {
